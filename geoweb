#!/usr/bin/env python

import os
import signal
import subprocess
import sys
import argparse

def start():
    print pidfile

    if os.path.exists(pidfile):
        sys.stderr.write("error: geoweb already seems to be running")
        return 1

    run_path = os.path.dirname(os.path.abspath(sys.argv[0]))
    os.chdir(path)

    return subprocess.call([cherry,
        "-d",
        "-i", "geoweb",
        "-c", "%s/server.conf" % run_path,
        "-p", pidfile,
        "-P", path])

def stop():
    retval = 0

    if os.path.exists(pidfile):
        f = open(pidfile)

        try:
            pid = int(f.read())
        except ValueError:
            sys.stderr.write("error: geoweb.pid does not contain a valid process id")
            return 1

        retval = os.kill(pid, signal.SIGKILL)
        os.remove(pidfile)

    return retval

def restart():
    stop()
    return start()

path = os.path.dirname(os.path.abspath(sys.argv[0]))
parser = argparse.ArgumentParser(description='start/stop geoweb')
parser.add_argument('--path', dest='path', nargs=1,
                   help='the path to where the modules can be found')
parser.add_argument('action', metavar='action',
                     choices=['start', 'stop', 'restart'],
                     help='[start|stop|restart]')

# Read the action argument.
if len(sys.argv) < 2:
    parser.print_help()
    sys.exit(1)

args = parser.parse_args()

# Determine the correct executable.
#
# TODO(choudhury): Check the environment first, rather than always running this
# test.
cherry = "cherryd2"
stdout_stderr = subprocess.Popen(["which", cherry], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = stdout_stderr.communicate()
if stdout:
  pass
else:
  cherry = "cherryd"
  stdout_stderr = subprocess.Popen(["which", cherry], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  stdout, stderr = stdout_stderr.communicate()
  if stdout:
    pass
  else:
    cherry = None

if cherry is None:
    sys.stderr.write("Neither `cherryd2` nor `cherry` seem to be in your path")
    sys.exit(1)

# Determine the path to this script.
if args.path:
  path = args.path[0]

print type(path)

pidfile = os.path.dirname(os.path.abspath(sys.argv[0])) + "/geoweb.pid"

# Dispatch on action argument.
code = 1
if args.action == "start":
    code = start()
elif args.action == "stop":
    code = stop()
elif args.action == "restart":
    code = restart()
else:
    parser.print_help()
    code = 1

print code
sys.exit(code)
